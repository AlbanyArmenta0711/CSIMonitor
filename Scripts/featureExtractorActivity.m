%Script that loads CSI csv file generated by Activity_datfile_to_csvfile
%script, process CSI amplitude and extract time and frequency domain
%features in order to generate an observation
%RESULT: activity observation

clc; clear; 

clc; clear;
%Load CSI File
fileName = './Datasets/BE.csv'; %Path/Name of the CSI csv file to be loaded
csiFile = load(fileName); 

%Separate CSI amplitudes and phase in two different numeric matrices
csiAmps = csiFile(:,2:91); %Column 1 is the timestamp
csiPhases = csiFile(:,92:181); 

fs = 25; %Sample frequency in Hz
t = 40; %Length of time window in seconds
sc = 10; %Number of sensitive subcarriers to be used for feature extraction
%Real Label
label = 1; 

%Define feature vectors/matrices
CD1Var = zeros(1,sc); %Variance of Detailed Coefficients of each sc
CD2Var = zeros(1,sc);
CD3Var = zeros(1,sc);
CD4Var = zeros(1,sc);
ApproxVar = zeros(1,sc); %Variance of Approximation Coefficients of each sc
CD1Mean = zeros(1,sc);
CD2Mean = zeros(1,sc);
CD3Mean = zeros(1,sc);
CD4Mean = zeros(1,sc);
ApproxMean = zeros(1,sc); %Mean of Approximation Coefficients of each sc
MeanSC = zeros(1,sc);  %Time domain Mean 
MedianSC = zeros(1,sc); %Time domain Median 
VarSC = zeros(1,sc);  %Time domain Variance
SkwSC = zeros(1,sc);  %Time domain Skewness
KurtSC = zeros(1,sc);     %Time domain Kurtosis
MAVSC = zeros(1,sc); %Time domain MEAN ABSOLUTE VALUE
SSISC = zeros(1,sc); %Time domain SIMPLE SIGN INTEGRAL
RMSSC = zeros(1,sc); %Time domain ROOT MEAN SQUARE
BREstimation = zeros(1,1); %First Breathing Rate Estimation
MaxFreq = zeros(1,sc); %Max Frequency of Power Spectrum of each sc
SpectrumSTD = zeros(1,sc); %Standard Deviation of Power Spectrum of each sc

%Only CSI amplitudes will be used
[rows,cols] = size(csiAmps); 
%Hampel Identifier application
[csiHampel,hampelIndex] = hampel(csiAmps,round(rows/5),2); 
%SG Filter
smoothCSI = csiHampel; 
smoothCSI = sgolayfilt(smoothCSI,3,101); 
%Subcarrier Selection
[dataCalibrated,indexes] = subcarrierSelection(smoothCSI,sc);

%DWT for obtaining detailed and approx coefficients
smoothSensitive = smoothCSI(:,indexes);  
for currentsc=1:sc
    [c,l] = wavedec(smoothSensitive(:,currentsc),4,'db2');
    approx = appcoef(c,l,'db2');
    [cd1,cd2,cd3,cd4] = detcoef(c,l,[1 2 3 4]);
    %Normalize each coefficients between 0 and 1 
    cd1Norm = normalize(cd1,'range',[0 1]);
    cd2Norm = normalize(cd2,'range',[0 1]);
    cd3Norm = normalize(cd3,'range',[0 1]);
    cd4Norm = normalize(cd4,'range',[0 1]);
    approxNorm = normalize(approx,'range',[0 1]); 
    %DWT Feature Extraction
    CD1Var(1,currentsc) = std(cd1Norm);          
    CD2Var(1,currentsc) = std(cd2Norm);           
    CD3Var(1,currentsc) = std(cd3Norm);           
    CD4Var(1,currentsc) = std(cd4Norm);            
    CD1Mean(1,currentsc) = mean(cd1Norm);          
    CD2Mean(1,currentsc) = mean(cd2Norm);           
    CD3Mean(1,currentsc) = mean(cd3Norm);           
    CD4Mean(1,currentsc) = mean(cd4Norm);  
    ApproxVar(1,currentsc) = var(approxNorm);
    ApproxMean(1,currentsc) = mean(approxNorm);
end

%Obtain Frequency Domain of sensitive calibrated subcarriers
n = 2^nextpow2(rows);
X = fft(dataCalibrated,n);
X = X./max(X);
X = fftshift(X);
psd = abs(X);
kk = 0:n-1;
F = kk/n*fs-fs/2;
[~,index] = find(F==0);
F = F(index:n);
psd = psd(index:n,:);

%Normalize calibrated signals between 0 and 1 
calibratedNorm = normalize(dataCalibrated,'range',[0 1]);      
%MEAN ABSOLUTE VALUE
MAVSC(1,:) = mean(abs(dataCalibrated));
%SIMPLE SIGN INTEGRAL
SSISC(1,:) = sum(abs(dataCalibrated).^2);
%ROOT MEAN SQUARE
RMSSC(1,:) = sqrt(SSISC(1,:)./rows);
%Mean of each calibrated signal
MeanSC(1,:) = mean(calibratedNorm);
%Median of each calibrated signal
MedianSC(1,:) = median(calibratedNorm); 
%Variance of each calibrated signal
VarSC(1,:) = var(calibratedNorm); 
%Skewness of each calibrated signal
SkwSC(1,:) = skewness(calibratedNorm);
%Kurtosis of each calibrated signal
KurtSC(1,:) = kurtosis(calibratedNorm);
[~,maxPos] = max(psd);    
%MAX FREQUENCY IN POWER SPECTRUM
MaxFreq(1,:)=F(maxPos);
%STANDARD DEVIATION OF POWER SPECTRUM
SpectrumSTD(1,:) = std(psd); 

%Dataset creation
[~,c] = size(CD1Var);
for i = 1:c
    index = mod(i,c); 
    if index == 0
        index =c; 
    end 
    headers(i) = strcat('CD1Var',sprintf("%d",index)); 
end 
[~,cC] = size(headers);
[~,c] = size(CD2Var); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD2Var',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(CD3Var); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD3Var',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(CD4Var); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD4Var',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(CD1Mean); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD1Mean',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(CD2Mean); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD2Mean',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(CD3Mean); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD3Mean',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(CD4Mean); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('CD4Mean',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(ApproxMean); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('ApproxMean',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(ApproxVar); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('ApproxVar',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(MeanSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('MeanSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(MedianSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('MedianSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(MAVSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('MAVSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(SSISC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('SSISC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(RMSSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('RMSSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(VarSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('VarSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(KurtSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('KurtSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(SkwSC); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('SkwSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(MaxFreq); 
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('MaxFreqSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(SpectrumSTD);
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('STDPSDSC',sprintf("%d",index));
end
[~,cC] = size(headers);
[~,c] = size(label);
for i = cC+1:cC+c 
    index = mod(i,c); 
    if index == 0
        index = c; 
    end
    headers(i) = strcat('Label',sprintf("%d",index));
end
dataset =[CD1Var CD2Var CD3Var CD4Var CD1Mean CD2Mean CD3Mean CD4Mean ...
    ApproxMean ApproxVar MeanSC MedianSC MAVSC SSISC RMSSC VarSC KurtSC SkwSC ...
    MaxFreq SpectrumSTD label];
dataset = [headers;dataset];